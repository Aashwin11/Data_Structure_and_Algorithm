/*
class Node {
  public:
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    int minTime(Node* root, int target) {
        // code here
        
        //step:1
        //parent_map and find target  node
        Node* tar;
        queue<Node*> que;
        que.push(root);
        
        unordered_map<Node*,Node*> parent;
        parent[root]=nullptr;
        
        while(!que.empty())
        {
            Node*curr=que.front();
            que.pop();
            if(curr->data==target)
            {
                tar=curr;
            }
            if(curr->left) 
            {
                que.push(curr->left);
                parent[curr->left]=curr;
            }
            if (curr->right) 
            {
                que.push(curr->right);
                parent[curr->right]=curr;
            }
            
        }
        
        
        //step:2: Unordered map to mark if the node is visited
        //
        
        unordered_map<Node*,bool> visited;
        que.push(tar);
        int t=-1;
        while(!que.empty())
        {
            int n=que.size();
            while(n--)
            {
                Node*curr=que.front();
                visited[curr]=true;
                que.pop();
                if(curr->left && !visited[curr->left])
                {
                    que.push(curr->left);
                }
                if(curr->right && !visited[curr->right])
                {
                    que.push(curr->right);
                }
                if(parent[curr] && !visited[parent[curr]])
                {
                    que.push(parent[curr]);
                }
            }
            t++;
        }
        return t;
        
    }
};
