//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

// User function Template for C++
class Solution {
  public:
    int mostBooked(int n, vector<vector<int>> &meetings) {
        // code here
        sort(meetings.begin(),meetings.end());
        // for(int i=0;i<meetings.size();i++)
        // {
        //     for(int j=0;j<meetings[i].size();j++)
        //     {
        //         cout<<meetings[i][j]<<endl;
        //     }
        //     cout<<endl;
        // }
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> occupied;
        priority_queue<int, vector<int>, greater<int>> available;
        vector<int> count(n,0);
        
        for (int i = 0; i < n; ++i) {
             available.push(i);
        }
        
        for(int i=0;i<meetings.size();i++)
        {
            int start=meetings[i][0];
            int end=meetings[i][1];
            int top=available.top();
            if(occupied.empty()) 
            {
                occupied.push({end,available.top()});
                count[available.top()]+=1;
                 available.pop();
            }
            else
            {
                while (!occupied.empty() && occupied.top().first <= start) {
                     available.push(occupied.top().second);
                     occupied.pop();
                }
                
                if(!available.empty())
                {
                    occupied.push({end,available.top()});
                    count[available.top()]+=1;
                    available.pop();
                }
                else
                {
                    int room = occupied.top().second;
                    int delay=end-start;
                    int delayEnd = occupied.top().first + delay;
                    occupied.pop();
                    count[room]++;
                    occupied.push({delayEnd, room});
                   
                }
                
                
                
            }
            
            
            
            
        }

        
            
        int index = 0;
int maxRoomUsed = count[0];
for (int i = 1; i < count.size(); i++) {
    if (count[i] > maxRoomUsed) {
        maxRoomUsed = count[i];
        index = i;
    }
}
        return index;
    }
};


//{ Driver Code Starts.

int main() {
    int t, n, m;
    cin >> t;
    while (t--) {
        cin >> n;
        cin >> m;
        vector<vector<int>> meetings(m, vector<int>(2));
        for (int i = 0; i < m; i++) {
            cin >> meetings[i][0] >> meetings[i][1];
        }
        Solution ob;
        cout << ob.mostBooked(n, meetings) << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
