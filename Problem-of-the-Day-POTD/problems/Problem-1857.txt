class Solution {
public:
    int largestPathValue(string colors, vector<vector<int>>& edges) {
        int n=colors.length();
        unordered_map<int,vector<int>>adj;
        vector<int>inDegree(n,0);

        for(auto &vec:edges){
            int u=vec[0];
            int v=vec[1];

            adj[u].push_back(v);
            inDegree[v]++;
        }

        queue<int>q;
        vector<vector<int>>dp(n,vector<int>(26,0));

        for(int i=0;i<n;i++){
            if(inDegree[i]==0){
                dp[i][colors[i]-'a']=1;
                q.push(i);
            }
        }

        int ans=0,countNodes=0;

        while(!q.empty()){
            int u=q.front();
            q.pop();

            countNodes++;
            ans=max(ans,dp[u][colors[u]-'a']);

            for(auto &v:adj[u]){
                for(int i=0;i<26;i++){
                    dp[v][i]=max(dp[v][i],dp[u][i]+(colors[v]-'a'==i));   
                }

                inDegree[v]--;
                if(inDegree[v]==0){
                    q.push(v);
                }
            }
        }
        if(countNodes<n) return -1;
        return ans;
    }
};
