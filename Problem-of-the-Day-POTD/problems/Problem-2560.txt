//Binary Search On Answer
class Solution {
public:
    bool isPossible(vector<int>& nums,int mid, int k)
    {
        int house=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]<=mid)
            {
                house++;
                i++;
            }
            if(house>=k)
        {
            return true;
        }
        }
    
        
    return false;
    }
    int minCapability(vector<int>& nums, int k) {
        

        int low=*min_element(begin(nums),end(nums));
        int high=*max_element(begin(nums),end(nums));
        cout<<low<<"-"<<high;
        int result=high;
        while(low<=high)
        {
            int mid=low+(high-low)/2;

            if(isPossible(nums,mid,k))
            {
                result=mid;

                high=mid-1;

            }
            else
            {
                low=mid+1;
            }
        }


    return result;
    }
};
