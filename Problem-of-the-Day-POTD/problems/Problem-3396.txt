//Array 
//Leetcode-Easy

CODE:
class Solution {
public:
    int minimumOperations(vector<int>& nums) {

        unordered_map<int,int> mp;
        int n=nums.size();
        for(int i=n-1;i>=0;i--)
        {
            mp[nums[i]]+=1;
            if(mp[nums[i]]==2)
            {
                return ((i+3)/3);
            }
        }
        return 0;
    }
};


//Explanation:
Explanation of the Approach
1. Traversing from Behind
  -Instead of scanning the array from the beginning, the algorithm starts from the end (i.e. from the rightmost index). The rationale is that by moving backwards, you can quickly find the first duplicate encountered in this reverse order. In many problems where the “last occurrence” or the “first duplicate (from the back)” matters, beginning at the end is an efficient “catch” as you do not need to scan through the entire list once the duplicate is detected.

2. Tracking Frequencies with an Unordered Map
  -An unordered_map (or hash table) is used to keep track of each element’s frequency as you traverse. Each time you examine an element, you check if it already exists in the map
  -If it does not exist, you add it (with a count of 1).
  -If it does exist (meaning you have seen the same element before), then you have found a duplicate.
  -This mechanism is efficient (average O(1) per insertion or lookup) and helps you quickly identify when an element is repeated.

3. Removing Elements on Finding a Duplicate
  -When a duplicate is found at index i during the backward scan, the problem dictates that all the elements from index i back to index 0 (the beginning) must be removed in one operation. In this scheme, once the duplicate is detected, no further scanning is required because that position indicates the start of the “cutoff” for deletion.

4. Counting Removal Operations with the Expression (i+3)/3
  -The expression (i+3)/3 is used to calculate the number of operations required to remove the subarray from index 0 up to index i. Here’s the intuition behind it:
  -Since the duplicate is found at index i, the total number of elements that need to be removed is i+1 (remember the indices start at 0, so the count is one more than the index).
  -Suppose that each removal operation can remove up to 3 elements at a time.
  -To determine how many operations are needed, you would normally compute the ceiling of (i+1) / 3. For example, if i+1 equals 7 elements, you need ceil(7/3) = 3 operations.
  -The expression (i+3)/3 is mathematically equivalent to ceil((i+1)/3) when using integer arithmetic. The addition of 3 to the index before the division effectively “rounds up” to count any remainder as an extra full operation.

DRY RUN:
Initial Array:
    ----+----+----+----+----+----+----+----+----+
    | 1 | 2  | 3  | 4  | 2  | 3  | 3  | 5  | 7  |
    ----+----+----+----+----+----+----+----+----+

Step 1: Pointer at Index 8 (Element: 7)
                                              i
    ----+----+----+----+----+----+----+----+----+
    | 1  | 2  | 3  | 4  | 2  | 3  | 3  | 5  | 7  |
    ----+----+----+----+----+----+----+----+----+
    Current Element: 7
    Action: Check if 7 is present in the unordered map. It is not, so insert 7 with frequency 1.
    mp:
    key | value
    -------------
    7   | 1

Step 2: Pointer at Index 7 (Element: 5)
                                         i
    ----+----+----+----+----+----+----+----+----+
    | 1  | 2  | 3  | 4  | 2  | 3  | 3  | 5  | 7  |
    ----+----+----+----+----+----+----+----+----+
    Current Element: 5
    Action: Check if 5 is in the map. It is not found, so insert 5 with frequency 1.

    mp:
    key | value
    -------------
    7   | 1
    5   | 1


Step 3: Pointer at Index 6 (Element: 3)                                
                                    i
    ----+----+----+----+----+----+----+----+----+
    | 1  | 2  | 3  | 4  | 2  | 3  | 3  | 5  | 7  |
    ----+----+----+----+----+----+----+----+----+
    Current Element: 3
    Action: Check if 3 is in the map. It is not, so insert 3 with frequency 1.

    mp:
    key | value
    -------------
    7   | 1
    5   | 1
    3   | 1


Step 4: Pointer at Index 5 (Element: 3) → Duplicate Found
                               i
    ----+----+----+----+----+----+----+----+----+
    | 1  | 2  | 3  | 4  | 2  | 3  | 3  | 5  | 7  |
    ----+----+----+----+----+----+----+----+----+
    Current Element: 3
    Action: Check if 3 is present in the map. It is already present (frequency 1), which indicates a duplicate has been found at index 5.

    mp:
    key | value
    -------------
    7   | 1
    5   | 1
    3   | 1   (Duplicate encountered)
    


    Operation on Duplicate:
        Once the duplicate is found, the algorithm will remove all elements from index 0 to index 5.
        
        Operation Count Calculation:
        
        Elements to remove = index 0 through 5 →→ 6 elements.
        Each removal operation can remove 3 elements at a time.
        Compute operations as:
                  op=(i+3)/3; =(5+3)/3 =8/3=2
    
    



