//DIFFERENCE ARRAY PROBLEM

class Solution {
public:
int n;
int q;
//Difference Array Technique
    bool checkZeroArray(vector<int>& nums, vector<vector<int>>& queries,int k)
    {
    
        vector<int> diff(n,0);

        for(int i=0;i<=k;i++)
        {
            int l=queries[i][0];
            int r=queries[i][1];
            int x=queries[i][2];

            diff[l]+=x;
            if(r+1<n)
            {
                diff[r+1]-=x;
            }
        }

        int cummSum=0;
        for(int i=0;i<n;i++)
        {
            cummSum+=diff[i];
            diff[i]=cummSum;
            if(nums[i]-diff[i]>0)
            return false;
        }

        return true;
    }
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        n=nums.size();
        q=queries.size();

        auto lambda=[](int x)
        {
            return x==0;
        };
        //thuis is an std to check if all elemnts are 0

        if(all_of(begin(nums),end(nums),lambda))
        {
            return 0;
        }

       //Binary Search
       int l=0;
       int r=q-1;
       int result=-1;
       while(l<=r)
       {
        int mid=l+(r-l)/2;
        if(checkZeroArray(nums,queries,mid)==true)
        {
            result=mid+1;
            r=mid-1;
        }
        else
        {
            l=mid+1;
        }
       }
       return result;
        
    }
};
