//Bottom Up Approach
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int tot=accumulate(nums.begin(),nums.end(),0);

        // if tot is odd , cant be split 
        if(tot%2!=0) return false;

        int sum=tot/2;
        int n=nums.size();

        //ARRAY FOR PREV SUM , initially all are false
        vector<bool> prev(sum+1,false);
        // aray for curr sum , initially all are false
        vector<bool> curr(sum+1,false);
        prev[0]=true;

        //Bottom up
        for (int i = 0; i <n; i++) {
            curr[0] = true; 
            for (int j = 0; j <sum; j++) {
                if (j < nums[i - 1])
                    curr[j] = prev[j];
                else
                    curr[j] = max(prev[j] , prev[j - nums[i - 1]]);
            }
            prev = curr;
        }

        return prev[sum]; 
    }
};


// Approach:

1.1st we need to ensure that , 
-if SUM calculated is ODD, then The split is not possible 
-[Think yourself, How would it be possible to break the  ]
